Data Collection and Analysis
df=pd.read_csv("/content/sample_data/ Importing the Dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
Mall_Customers.csv")   #loading the data
df.head()      #first 5 rows in dataframe
df.tail()    #last 5 rows in dataframe
df.shape          #finding the number of rows and columns
df.info()         #getting some information about the dataset
df.describe()
df.dtypes
df.isnull().sum()         #checking for missing values
df.drop(["CustomerID"],axis=1, inplace=True)
df.head()
Analysis of dataset
plt.figure(1, figsize=(15,6))
n=0
for x in ['Age' , 'Annual Income (k$)', 'Spending Score (1-100)']:
  n += 1
  plt.subplot(1, 3, n)
  plt.subplots_adjust(hspace =0.5 , wspace =0.5)
  sns.distplot(df[x] , bins = 20)
  plt.title('Distplot of {}'.format(x))
plt.show()
plt.figure(figsize=(15,5))
sns.countplot(y='Gender',data=df)
plt.show()
plt.figure(1,figsize=(15,7))
n=0
for cols in ['Age' ,'Annual Income (k$)', 'Spending Score (1-100)']:
  n += 1
  plt.subplot(1 , 3 , n)
  sns.set(style="whitegrid")
  plt.subplots_adjust(hspace= 0.5, wspace = 0.5)
  sns.violinplot(x = cols , y= 'Gender' , data = df)
  plt.ylabel('Gender' if n == 1 else '')
  plt.title('Violin Plot')
plt.show()
age_18_25 = df.Age[(df.Age >= 18) & (df.Age <= 25)]
age_26_35 = df.Age[(df.Age >= 26) & (df.Age <= 35)]
age_36_45 = df.Age[(df.Age >= 36) & (df.Age <= 45)]
age_46_55 = df.Age[(df.Age >= 46) & (df.Age <= 55)]
age_55above = df.Age[df.Age >= 56]

agex = ["18-25","26-35","36-45","46-55","55+"]
agey = [len(age_18_25.values),len(age_26_35.values),len(age_36_45.values),len(age_46_55.values),len(age_55above.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=agex, y=agey, palette="mako")
plt.title("Number of Customer and Ages")
plt.xlabel("Age")
plt.ylabel("Number of Customer")
plt.show()
sns.relplot(x="Annual Income (k$)",y="Spending Score (1-100)", data=df)
<seaborn.axisgrid.FacetGrid at 0x7efc4b602fd0>
ss_1_20 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 1) & (df["Spending Score (1-100)"] <= 20)]
ss_21_40 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 21) & (df["Spending Score (1-100)"] <= 40)]
ss_41_60 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 41) & (df["Spending Score (1-100)"] <= 60)]
ss_61_80 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 61) & (df["Spending Score (1-100)"] <= 80)]
ss_81_100 = df["Spending Score (1-100)"][(df["Spending Score (1-100)"] >= 81) & (df["Spending Score (1-100)"] <= 100)]

ssx = ["1-20", "21-40", "41-60", "61-80", "81-100"]
ssy = [len(ss_1_20.values), len(ss_21_40.values), len(ss_41_60.values), len(ss_61_80.values), len(ss_81_100.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=ssx, y=ssy, palette="rocket")
plt.title("Spending Scores")
plt.xlabel("Score")
plt.ylabel("Number of Customer Having the Score")
plt.show()
ai0_30 = df["Annual Income (k$)"][(df["Annual Income (k$)"] >= 1) & (df["Annual Income (k$)"] <= 30)]
ai31_60 = df["Annual Income (k$)"][(df["Annual Income (k$)"] >= 31) & (df["Annual Income (k$)"] <= 60)]
ai61_90 = df["Annual Income (k$)"][(df["Annual Income (k$)"] >= 61) & (df["Annual Income (k$)"] <= 90)]
ai91_120 = df["Annual Income (k$)"][(df["Annual Income (k$)"] >= 91) & (df["Annual Income (k$)"] <= 120)]
ai121_150 = df["Annual Income (k$)"][(df["Annual Income (k$)"] >= 121) & (df["Annual Income (k$)"] <= 150)]

aix = ["$ 0 - 30,000","$ 30,001 - 60,000","$ 60,001 - 90,000","$ 90,001 - 120,000","$ 120,001 - 150,000",]
aiy = [len(ai0_30.values), len(ai31_60.values), len(ai61_90.values), len(ai91_120.values), len(ai121_150.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=aix, y=aiy, palette="Spectral")
plt.title("Annual Incomes")
plt.xlabel("Income")
plt.ylabel("Number of Customer")
plt.show()
Choosing the number of clusters
X1=df.loc[:, ["Age","Spending Score (1-100)"]].values          #finding wcss value for different number of clusters

from sklearn.cluster import KMeans
wcss = []
for k in range(1, 11):
  kmeans = KMeans(n_clusters=k, init="k-means++")
  kmeans.fit(X1)
  wcss.append(kmeans.inertia_)
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.ylabel("WCSS")
plt.show()
Training the k-means clustering model
from sklearn.model_selection import train_test_split
kmeans = KMeans(n_clusters=4)

label = kmeans.fit_predict(X1)

print(label)
print(kmeans.cluster_centers_)
X1_train, X1_test = train_test_split(X1, test_size=0.2, random_state=2)
print(x1.shape, X1_train.shape, X1_test.shape)

